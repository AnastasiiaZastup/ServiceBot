import React, { useEffect, useState } from "react";

export default function MasterSetup({ user, onBack, onSave }) {
  const [services, setServices] = useState([]);
  const [selectedServices, setSelectedServices] = useState([]);
  const [slotInput, setSlotInput] = useState("");
  const [slots, setSlots] = useState([]);

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ—Å–ª—É–≥–∏
  useEffect(() => {
    const fetchServices = async () => {
      try {
        const res = await fetch(
          "https://service-bot-backend.onrender.com/services"
        );
        const data = await res.json();
        setServices(data.services || []);
      } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥:", err);
      }
    };
    fetchServices();
  }, []);

  const toggleService = (serviceId) => {
    if (selectedServices.includes(serviceId)) {
      setSelectedServices(selectedServices.filter((id) => id !== serviceId));
    } else {
      setSelectedServices([...selectedServices, serviceId]);
    }
  };

  const addSlot = () => {
    if (!slotInput) return;
    setSlots([...slots, slotInput]);
    setSlotInput("");
  };

  const saveAll = async () => {
    try {
      // 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–ª—É–≥–∏
      await fetch("https://service-bot-backend.onrender.com/master/services", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          master_id: user.id,
          service_ids: selectedServices,
        }),
      });

      // 2. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ª–æ—Ç–∏
      await fetch("https://service-bot-backend.onrender.com/master/slots", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          master_id: user.id,
          times: slots,
        }),
      });

      alert("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
      onSave(); // –ø–µ—Ä–µ—Ö—ñ–¥ –¥–∞–ª—ñ
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:", err);
      alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö");
    }
  };

  return (
    <div style={{ padding: 16 }}>
      <h2>üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä–∞</h2>

      <h3>–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥–∏, —è–∫—ñ –≤–∏ –Ω–∞–¥–∞—î—Ç–µ:</h3>
      {services.map((service) => (
        <div key={service.id}>
          <label>
            <input
              type="checkbox"
              checked={selectedServices.includes(service.id)}
              onChange={() => toggleService(service.id)}
            />
            {service.name}
          </label>
        </div>
      ))}

      <h3 style={{ marginTop: 16 }}>–î–æ–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–æ—Ç–∏ —á–∞—Å—É:</h3>
      <div style={{ display: "flex", gap: 8 }}>
        <input
          type="time"
          value={slotInput}
          onChange={(e) => setSlotInput(e.target.value)}
        />
        <button onClick={addSlot}>‚ûï –î–æ–¥–∞—Ç–∏</button>
      </div>

      <ul style={{ marginTop: 12 }}>
        {slots.map((slot, idx) => (
          <li key={idx}>{slot}</li>
        ))}
      </ul>

      <div style={{ marginTop: 24 }}>
        <button onClick={onBack} style={{ marginRight: 12 }}>
          ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
        </button>
        <button
          onClick={saveAll}
          style={{
            backgroundColor: "#10b981",
            color: "#fff",
            padding: "6px 12px",
            border: "none",
            borderRadius: 6,
          }}
        >
          üíæ –ó–±–µ—Ä–µ–≥—Ç–∏
        </button>
      </div>
    </div>
  );
}
